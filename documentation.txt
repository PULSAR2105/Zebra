/-----------------------------------------------------------------------------\
|                          ______     _                                       |
|                         |___  /    | |                                      |
|                            / /  ___| |__  _ __ __ _                         |
|                           / /  / _ \ '_ \| '__/ _` |                        |
|                         ./ /__|  __/ |_) | | | (_| |                        |
|                         \_____/\___|_.__/|_|  \__,_|                        |
|                                                                             |
\-----------------------------------------------------------------------------/

SYNTAX :

Comments:
# <your comment>

Import other contents:
import <library>   # other installed library
import <code_path> # other code file to import

Types and variables:

defined variable     => <name> = <value> # variable with it's value
not defined variable => <type> <name>    # minimum size variable without value

int   => variable bits
int64 => 64 bits
float => 128 bits
list  => list
tuple => tuple
dict  => dict
str   => 32 bits
bool  => 8 bits

int         => 42                              # int value
float       => 3.14159265                      # float value
string      => "string"                        # List of characters (string)
list        => [1, "hey", 3]                   # List of values (list)
tuple       => (1, "hey", 2)                   # Tuple, with at least one comma in the parenthesis
dictionnary => {"name" => "Lucas", "age" => 3} # Dictionary of values (dict)
booleen     => true/false                      # Boolean (bool)
None        => None                            # zero value (None)

Operators:
operators             => [=, +, -, *, /, //, ^, % (modulo)]
condensed operators   => [+=, -=, *=, /=, //=, ^=, %=]
comparative operators => [==, !=, >, <, >=, <=, in, not]
logics operators      => [and, or, xor, nand, nor, nxor]
list range            => [<start> : <end> : <step>] # interval of a list

Conditions:
condition => if <condition>:
else if   => elif <condition>:
else      => else:

Loops :
conditional loop => while <condition>:
loop for         => for <variable(s)> in <list>:

Priorities from left to right:
++++++++ "()", "[]", "{}"
+++++++  "="
++++++   "and", "or", "xor", "in", "nand", "nor", "xnor", "nin"
+++++    "<", ">", "<=", ">=", "!=", "=="
++++     "+", "-"
+++      "*", "/", "//", "%"
++       "^"
+        "." #opp

Functions:
definie functions => def <name>(<parameters>):
call a function   => <name>(<parameters>)

Objects:
attributes => <object>.<attribut>
functions  => <objects>.<functions>()

Basic functions:
print(<message(s)>)           # display value(s) separated by commas
input(<message(s)>)           # displays the message and requests a value

not(<bool>)                   # invert boolean value

len(<list>)                   # length of a list
range(<start>, <end>, <step>) # list creation (range)

max(<list>)                   # maximum value of a list
min(<list>)                   # minimum value of a list

round(<value>)                # rounded to the nearest whole number
floor(<value>)                # rounded up to the nearest whole number
cell(<value>)                 # rounded down to the nearest whole number

int(<value>)                  # converts a value to an integer if possible
float(<value>)                # converts a value to a float if possible
str(<value>)                  # converts a value to a string if possible