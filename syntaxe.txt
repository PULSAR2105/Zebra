Types and variables:

defined variable     => <name> = <value> # variable with it's value
not defined variable => <type> <name>    # minimum size variable without value

int         => variable bits
float       => 128 bits
list <type> => list
str         => 32 bits
bool        => 8 bits

int         => 42                          # int value
float       => 3.14159265                  # float value
string      => "string"                    # List of characters (string)
list        => [1, "hey", 3]               # List of values (list)
tuple       => (1, "hey", 3)               # List of values (tuple) not modifiable
dictionnary => {"name": "Lucas", "age": 3} # Dictionary of values (dict)
booleen     => true/false                  # Boolean (bool)
None        => None                        # zero value (None)

Operators:
operators             => [+, -, *, /, //, ^, % (modulo), =]
condensed operators   => [+=, -=, *=, /=, **=, #=, %=]
comparative operators => [==, !=, >, <, >=, <=, in, not]
logics operators      => [and, or, not, xor]
list range            => [<start> : <end> : <step>] # interval of a list

Conditions:
condition => if <condition>: # condition if
else if   => elif <condition>: # condition elif
else      => else: # condition else

Loops :
conditionalLoop => while <condition>: # boucle while
loopFor         => for <variable(s)> in <list>: # boucle for

Priorities from left to right:
++++++++ "()", "[]", "{}"
+++++++  "="
++++++   "and", "or", "xor", "in"
+++++    "<", ">", "<=", ">=", "!=", "=="
++++     "+", "-"
+++      "*", "/", "//", "%"
++       "^"
+        "." #opp

Functions:
functions => def <nom>(<parameters>):
call a function => <nom>(<parameters>)

Basic functions:
print(<message(s)>)           # display value(s) separated by commas
input(<message(s)>)           # displays the message and requests a value

len(<list>)                   # length of a list
range(<start>, <end>, <step>) # list creation (range)

max(<list>)                   # maximum value of a list
min(<list>)                   # minimum value of a list

round(<value>)                # rounded to the nearest whole number
floor(<value>)                # rounded up to the nearest whole number
cell(<value>)                 # rounded down to the nearest whole number

int(<value>)                  # converts a value to an integer if possible
float(<value>)                # converts a value to a float if possible
str(<value>)                  # converts a value to a string if possible